# Local testing configuration with prod profile
# This file is useful for testing the production configuration locally

# Server configuration
server.port=8080

# Database configuration - Local MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/learnlink?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=4warriors
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Connection pooling and resilience configuration
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=8
spring.datasource.hikari.minimum-idle=4
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.test-on-borrow=true
spring.datasource.validation-query=SELECT 1

# JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true

# JWT configuration
app.jwt.secret=verySecretKeyThatIsLongEnoughForHS256AlgorithmAtLeast32Bytes
app.jwt.expiration=86400000

# File upload configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
app.file.upload-dir=./uploads

# Logging for troubleshooting
logging.level.org.springframework=INFO
logging.level.com.learnlink=DEBUG
logging.level.org.hibernate.SQL=INFO
logging.level.com.zaxxer.hikari=INFO

# CORS configuration
app.cors.allowed-origins=http://localhost:3000

# Google OAuth2 configuration for local testing
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/api/auth/oauth2/callback/google

# Add these properties for OAuth2 redirect handling
app.oauth2.redirectUri=http://localhost:3000/oauth2/redirect
